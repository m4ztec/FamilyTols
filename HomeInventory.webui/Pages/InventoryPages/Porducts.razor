@page "/inventory/{inventoryId}/products"
@using Microsoft.AspNetCore.Components.QuickGrid
@using HomeInventory.shared.Models

@inject HttpClient http
@inject JsUtills JsUtills
@attribute [Authorize]

<h3>Porducts</h3>

<QuickGrid Class="table" Items="products">
    <PropertyColumn Property="product => product.ProductName" />
    <PropertyColumn Property="product => product.ProductPrice" />
    <PropertyColumn Property="product => product.ExistingAmount" />
    <PropertyColumn Property="product => product.DesiredAmount" />

    <TemplateColumn Title="Actions">
        <button class="btn btn-sm btn-primary" @onclick="() => EditRow(context)">Edit</button>
    </TemplateColumn>
</QuickGrid>


<dialog @ref="productDialog">
    <h4>Edit Person</h4>

    @if (selectedProduct is not null)
    {
        <div class="mb-3">
            <label>Name:</label>
            <input @bind="selectedProduct.ProductName" class="form-control" />
        </div>
        <div class="mb-3">
            <label>Name:</label>
            <input @bind="selectedProduct.ExistingAmount" class="form-control" />
        </div>
        <div class="mb-3">
            <label>Name:</label>
            <input @bind="selectedProduct.DesiredAmount" class="form-control" />
        </div>
        <button class="btn btn-success me-2" @onclick="SaveEdit">Save</button>
        <button class="btn btn-secondary" @onclick="CloseDialog">Cancel</button>
    }
</dialog>

@code {
    [Parameter]
    public required string inventoryId { get; set; }

    private ElementReference productDialog;

    public IQueryable<InventoryProductDto>? products;

    public InventoryProductDto? selectedProduct;
    private Product? backupProduct;

    protected override async Task OnInitializedAsync()
    {
        await GetPorducts();
    }

    public async Task GetPorducts()
    {
        products = (await http.GetFromJsonAsync<IEnumerable<InventoryProductDto>>($"/api/InventoryProducts/{inventoryId}"))?.AsQueryable();
    }

    private async Task AddNewRow()
    {
        selectedProduct = new InventoryProductDto();
        await JsUtills.OpenDialog(productDialog);
    }

    private async Task EditRow(InventoryProductDto product)
    {
        await JsUtills.OpenDialog(productDialog);
    }

    private async Task SaveEdit()
    {
        selectedProduct = null;
        await JsUtills.CloseDialog(productDialog);
    }

    private async Task CloseDialog()
    {
        if (backupProduct is not null && selectedProduct is not null)
        {
            // Restore old values if canceled
            selectedProduct.Name = backupProduct.Name;
            selectedProduct.Description = backupProduct.Description;
        }
        selectedProduct = null;
        await JsUtills.CloseDialog(productDialog);
    }
}
